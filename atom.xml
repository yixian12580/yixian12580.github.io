<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逸贤 | Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yixian12580.github.io/"/>
  <updated>2025-10-24T10:40:38.000Z</updated>
  <id>https://yixian12580.github.io/</id>
  
  <author>
    <name>丨逸贤丨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql高可用MHA部署</title>
    <link href="https://yixian12580.github.io/2025/10131ef651.html"/>
    <id>https://yixian12580.github.io/2025/10131ef651.html</id>
    <published>2025-10-24T09:46:29.000Z</published>
    <updated>2025-10-24T10:40:38.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;MySQL的MHA（Master High Availability）是一种用于MySQL高可用性的解决方案，旨在提高MySQL数据库集群的可用性和故障恢复能力。MHA主要通过自动故障切换来确保数据库的高可用性，它能够在主数据库出现故障时，自动将从数据库提升为主数据库，以避免长时间的服务中断。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="数据库" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://yixian12580.github.io/tags/MySQL/"/>
    
      <category term="MHA" scheme="https://yixian12580.github.io/tags/MHA/"/>
    
      <category term="MySQL高可用" scheme="https://yixian12580.github.io/tags/MySQL%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>crane-scheduler基于真实负载进行k8s调度</title>
    <link href="https://yixian12580.github.io/2025/10df35fc4.html"/>
    <id>https://yixian12580.github.io/2025/10df35fc4.html</id>
    <published>2025-10-17T10:02:54.000Z</published>
    <updated>2025-10-17T11:11:21.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;原生 kubernetes 调度器只能基于资源的 resource request 进行调度，然而 Pod 的真实资源使用率，往往与其所申请资源的 request/limit 差异很大，导致集群负载不均的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="K8S" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/K8S/"/>
    
    
      <category term="crane-scheduler" scheme="https://yixian12580.github.io/tags/crane-scheduler/"/>
    
      <category term="scheduler" scheme="https://yixian12580.github.io/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>k8s灰度发布配置</title>
    <link href="https://yixian12580.github.io/2025/09c37847c2.html"/>
    <id>https://yixian12580.github.io/2025/09c37847c2.html</id>
    <published>2025-09-13T10:27:58.000Z</published>
    <updated>2025-09-12T11:01:51.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在现代微服务架构中，应用的更新和发布是一个高频且关键的操作。如何在不影响用户体验的前提下，安全、平稳地将新版本应用推送到生产环境，是每个开发者和运维团队必须面对的挑战。灰度发布（Gray Release）作为一种渐进式发布策略，能够有效降低发布风险，而 Kubernetes 的 Ingress 注解功能为我们提供了一种简单而强大的实现方式。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="K8S" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/K8S/"/>
    
    
      <category term="灰度发布" scheme="https://yixian12580.github.io/tags/%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/"/>
    
      <category term="金丝雀发布" scheme="https://yixian12580.github.io/tags/%E9%87%91%E4%B8%9D%E9%9B%80%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>服务网格Istio安装及使用</title>
    <link href="https://yixian12580.github.io/2025/098b941b9d.html"/>
    <id>https://yixian12580.github.io/2025/098b941b9d.html</id>
    <published>2025-09-12T12:40:09.000Z</published>
    <updated>2025-09-12T11:01:51.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在k8s中配置启用了istio之后，在创建pod之后会自动注入一个Envoy这样的容器，可理解为代理容器，也就是说，创建pod是除了定义的一个主容器，还会在启动istio之后自动注入一个容器，一个pod有两个容器，该代理容器主要是用来做流量的控制和管理，能做到流量的拦截，能控制熔断、超时、重试，按流量的百分比代理等作用。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="K8S" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/K8S/"/>
    
    
      <category term="灰度发布" scheme="https://yixian12580.github.io/tags/%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/"/>
    
      <category term="服务网格" scheme="https://yixian12580.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/"/>
    
      <category term="Istio" scheme="https://yixian12580.github.io/tags/Istio/"/>
    
      <category term="熔断" scheme="https://yixian12580.github.io/tags/%E7%86%94%E6%96%AD/"/>
    
      <category term="超时" scheme="https://yixian12580.github.io/tags/%E8%B6%85%E6%97%B6/"/>
    
      <category term="故障注入" scheme="https://yixian12580.github.io/tags/%E6%95%85%E9%9A%9C%E6%B3%A8%E5%85%A5/"/>
    
      <category term="重试" scheme="https://yixian12580.github.io/tags/%E9%87%8D%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>k8s更新应用版本优雅终止旧pod</title>
    <link href="https://yixian12580.github.io/2025/09f71c8c0e.html"/>
    <id>https://yixian12580.github.io/2025/09f71c8c0e.html</id>
    <published>2025-09-12T08:23:08.000Z</published>
    <updated>2025-09-12T10:19:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;所谓优雅终止，就是保证在销毁 Pod 的时候保证对业务无损，比如在业务发版时，让工作负载能够平滑滚动更新。 Pod 在销毁时，会停止容器内的进程，通常在停止的过程中我们需要执行一些善后逻辑，比如等待存量请求处理完以避免连接中断，或通知相关依赖进行清理等，从而实现优雅终止目的。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="K8S" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/K8S/"/>
    
    
      <category term="pod无缝更新" scheme="https://yixian12580.github.io/tags/pod%E6%97%A0%E7%BC%9D%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>代码扫描平台SonarQube部署及配置jenkins集成</title>
    <link href="https://yixian12580.github.io/2025/089615066.html"/>
    <id>https://yixian12580.github.io/2025/089615066.html</id>
    <published>2025-08-29T11:02:16.000Z</published>
    <updated>2025-09-05T06:59:31.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Sonar是一个用于代码质量管理的开源平台，用于管理源代码的质量，可以从七个维度检测代码质量，通过插件形式，可以支持包括java,C#,C/C++,PL/SQL,Cobol,JavaScrip,Groovy等等二十几种编程语言的代码质量管理与检测。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="SonarQube" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/SonarQube/"/>
    
    
      <category term="SonarQube" scheme="https://yixian12580.github.io/tags/SonarQube/"/>
    
      <category term="jenkins" scheme="https://yixian12580.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>ES数据迁移</title>
    <link href="https://yixian12580.github.io/2025/089b445ae1.html"/>
    <id>https://yixian12580.github.io/2025/089b445ae1.html</id>
    <published>2025-08-22T06:49:30.000Z</published>
    <updated>2025-09-09T04:29:11.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;公司最近需要把uat环境数据迁移到生产环境，其中有一个就是es数据迁移，在这里记录下迁移办法。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="es" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/es/"/>
    
    
      <category term="es" scheme="https://yixian12580.github.io/tags/es/"/>
    
      <category term="elasticdump" scheme="https://yixian12580.github.io/tags/elasticdump/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ命令行操作</title>
    <link href="https://yixian12580.github.io/2025/0869c0894f.html"/>
    <id>https://yixian12580.github.io/2025/0869c0894f.html</id>
    <published>2025-08-22T06:12:52.000Z</published>
    <updated>2025-08-22T10:40:02.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Rocketmq有带图形界面的控制台，这次公司环境迁移，需要把jl环境的topic及消费组加到另一个Rocketmq集群，如果在web控制台一个个点太费时间了，可以通过命令行批量添加。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="RocketMQ" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/RocketMQ/"/>
    
    
      <category term="RocketMQ" scheme="https://yixian12580.github.io/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>docker部署certimateSSL证书管理</title>
    <link href="https://yixian12580.github.io/2025/080.html"/>
    <id>https://yixian12580.github.io/2025/080.html</id>
    <published>2025-08-12T09:04:29.000Z</published>
    <updated>2025-08-13T02:10:01.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前有写过一篇文章使用certbot申请免费ssl证书，最近发现certimate有提供web界面，而且集成了证书申请，证书部署，证书续订，监控告警等功能，都可以通过web界面点几下就可以完成，比较适合小白。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="域名证书" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/"/>
    
    
      <category term="免费证书" scheme="https://yixian12580.github.io/tags/%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6/"/>
    
      <category term="certimate" scheme="https://yixian12580.github.io/tags/certimate/"/>
    
  </entry>
  
  <entry>
    <title>K8S集群证书更新</title>
    <link href="https://yixian12580.github.io/2025/076a4a6c72.html"/>
    <id>https://yixian12580.github.io/2025/076a4a6c72.html</id>
    <published>2025-07-14T02:25:30.000Z</published>
    <updated>2025-07-14T03:10:58.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;通常情况下，使用 KubeKey 部署的 Kubernetes 集群是不会遇到证书过期问题的，KubeKey 在部署时会自动配置一个定时任务，定期检查集群中所有证书的有效期，系统会监控证书状态，当发现任何证书的剩余有效期低于 30 天时，就会触发自动更新流程。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="K8S" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/K8S/"/>
    
    
      <category term="证书" scheme="https://yixian12580.github.io/tags/%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>K8S部署seata-server集群</title>
    <link href="https://yixian12580.github.io/2025/068c94af43.html"/>
    <id>https://yixian12580.github.io/2025/068c94af43.html</id>
    <published>2025-06-15T07:26:43.000Z</published>
    <updated>2025-06-15T08:12:17.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Seata分TC、TM和RM三个角色，TC（Server端）为单独服务端部署，TM和RM（Client端）由业务系统集成。 Seata-server 的高可用依赖于&lt;code&gt;注册中心&lt;/code&gt;、&lt;code&gt;配置中心&lt;/code&gt;和&lt;code&gt;数据库&lt;/code&gt;来实现。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="K8S" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/K8S/"/>
    
    
      <category term="seata-server集群" scheme="https://yixian12580.github.io/tags/seata-server%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>K8S创建Redis集群并迁移数据</title>
    <link href="https://yixian12580.github.io/2025/06b3e106e6.html"/>
    <id>https://yixian12580.github.io/2025/06b3e106e6.html</id>
    <published>2025-06-15T04:30:55.000Z</published>
    <updated>2025-06-15T07:08:25.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;公司之前生产环境一直用的是单节点的Redis，生产环境版本是6.2.6，开发需要使用PEXPIRETIME命令，这个命令是7.0版本之后才有的，所以趁着这个机会，升级Redis版本顺便把单节点转成集群。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="K8S" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/K8S/"/>
    
    
      <category term="Redis集群" scheme="https://yixian12580.github.io/tags/Redis%E9%9B%86%E7%BE%A4/"/>
    
      <category term="Redis数据迁移" scheme="https://yixian12580.github.io/tags/Redis%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>购买海外VPS部署v2ray服务</title>
    <link href="https://yixian12580.github.io/2025/051a0de5eb.html"/>
    <id>https://yixian12580.github.io/2025/051a0de5eb.html</id>
    <published>2025-05-27T10:11:49.000Z</published>
    <updated>2025-05-28T12:10:08.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;公司之前翻墙一直是购买的梯子，由于泄密原因，决定自己购买海外VPS来部署v2ray服务，在此记录下整个过程。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="V2ray" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/V2ray/"/>
    
    
      <category term="V2ray" scheme="https://yixian12580.github.io/tags/V2ray/"/>
    
      <category term="Vultr" scheme="https://yixian12580.github.io/tags/Vultr/"/>
    
  </entry>
  
  <entry>
    <title>kafka相关操作</title>
    <link href="https://yixian12580.github.io/2025/0586a17973.html"/>
    <id>https://yixian12580.github.io/2025/0586a17973.html</id>
    <published>2025-05-14T09:10:49.000Z</published>
    <updated>2025-05-14T09:48:44.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;记录下kafka相关的命令。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Kafka" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/Kafka/"/>
    
    
      <category term="消息队列" scheme="https://yixian12580.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="kafka" scheme="https://yixian12580.github.io/tags/kafka/"/>
    
      <category term="kafka命令" scheme="https://yixian12580.github.io/tags/kafka%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Grafana-oncall企微告警问题</title>
    <link href="https://yixian12580.github.io/2025/04ab4e863e.html"/>
    <id>https://yixian12580.github.io/2025/04ab4e863e.html</id>
    <published>2025-04-30T06:50:31.000Z</published>
    <updated>2025-04-30T08:49:23.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;oncall平台部署完之后，我们一般会接入各个平台的告警信息，比如我接入了Skywalking，Graylog和Prometheus的告警。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Oncall" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/Oncall/"/>
    
    
      <category term="grafana" scheme="https://yixian12580.github.io/tags/grafana/"/>
    
      <category term="oncall" scheme="https://yixian12580.github.io/tags/oncall/"/>
    
      <category term="企微告警" scheme="https://yixian12580.github.io/tags/%E4%BC%81%E5%BE%AE%E5%91%8A%E8%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>oncall平台部署及使用</title>
    <link href="https://yixian12580.github.io/2025/044e4419ae.html"/>
    <id>https://yixian12580.github.io/2025/044e4419ae.html</id>
    <published>2025-04-10T12:36:37.000Z</published>
    <updated>2025-05-22T03:21:55.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Grafana OnCall 是 Grafana Labs 推出的一款开源事件响应与排班调度工具，可以帮助团队管理和跟踪故障处理情况，提高 SRE 团队的工作效率，更快地解决事件。可以自动路由警报到指定的值班团队和 ChatOps 频道，根据预定义的升级策略、时间表和通知偏好进行处理。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Oncall" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/Oncall/"/>
    
    
      <category term="grafana" scheme="https://yixian12580.github.io/tags/grafana/"/>
    
      <category term="oncall" scheme="https://yixian12580.github.io/tags/oncall/"/>
    
  </entry>
  
  <entry>
    <title>javamelody监控图表中文乱码</title>
    <link href="https://yixian12580.github.io/2025/031c702fda.html"/>
    <id>https://yixian12580.github.io/2025/031c702fda.html</id>
    <published>2025-03-26T03:02:28.000Z</published>
    <updated>2025-03-26T03:15:53.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;JavaMelody是一款能够监测Java或Java EE应用程序的服务，JavaMelody能够很好的反映我们系统的各种性能指标，并提供很好的图形界面，其指标还能反应Java内存和Java CPU使用情况、用户Session数量、JDBC连接数、http请求、sql请求、jsp页面与业务接口方法（EJB3、Spring、 Guice）的执行数量，平均执行时间，错误百分比等。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
      <category term="javamelody" scheme="https://yixian12580.github.io/tags/javamelody/"/>
    
  </entry>
  
  <entry>
    <title>使用certbot续费letsencrypt证书触发告警问题</title>
    <link href="https://yixian12580.github.io/2025/03acc9418.html"/>
    <id>https://yixian12580.github.io/2025/03acc9418.html</id>
    <published>2025-03-18T02:50:44.000Z</published>
    <updated>2025-03-26T03:15:53.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我们是使用cerbot来申请letsencrypt证书的，letsencrypt证书有效期只有3个月，过期前需要续期，通过certbot命令去定时续期，但是每次续期都会触发阿里云的AK告警。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="域名证书" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/"/>
    
    
      <category term="cerbot" scheme="https://yixian12580.github.io/tags/cerbot/"/>
    
  </entry>
  
  <entry>
    <title>k8s部署Debezium及kafka</title>
    <link href="https://yixian12580.github.io/2025/032620f80c.html"/>
    <id>https://yixian12580.github.io/2025/032620f80c.html</id>
    <published>2025-03-10T02:11:20.000Z</published>
    <updated>2025-09-29T08:45:08.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Debezium 是一组分布式服务，用于捕获数据库中的更改（通过读取数据库日志的方式来完成数据增删改的记录），以便您的应用程序可以看到这些更改并做出响应。Debezium 将每个数据库表中的所有行级更改记录在更改事件流中，应用程序只需读取这些流，即可按更改事件发生的顺序查看更改事件。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="K8S" scheme="https://yixian12580.github.io/categories/%E6%8A%80%E6%9C%AF/K8S/"/>
    
    
      <category term="kafka" scheme="https://yixian12580.github.io/tags/kafka/"/>
    
      <category term="Debezium" scheme="https://yixian12580.github.io/tags/Debezium/"/>
    
  </entry>
  
  <entry>
    <title>Linux机器压测脚本</title>
    <link href="https://yixian12580.github.io/2025/03d01d51b6.html"/>
    <id>https://yixian12580.github.io/2025/03d01d51b6.html</id>
    <published>2025-03-06T04:09:36.000Z</published>
    <updated>2025-03-06T04:26:32.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;工作中我们可能会遇到需要模拟高并发的情况，就是我们说的压测，以下通过一些shell脚本用于模拟 OOM（内存耗尽）、CPU 高负载、网络高吞吐 和 磁盘高 IO 压力。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://yixian12580.github.io/categories/Linux/"/>
    
    
      <category term="压测" scheme="https://yixian12580.github.io/tags/%E5%8E%8B%E6%B5%8B/"/>
    
  </entry>
  
</feed>
